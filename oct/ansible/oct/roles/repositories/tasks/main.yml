---
- name: ensure directories exist to house the repositories we need
  file:
    path: '{{ origin_ci_gopath }}/{{ item }}'
    state: directory
    owner: '{{ origin_ci_user }}'
  with_items:
    - src/github.com/openshift
    - pkg
    - bin

- name: initialize configuration for each private repository
  include: initialize_bare_repository.yml
  vars:
    origin_ci_repository: '{{ item }}'
  with_items:
    - 'ose'
    - 'online-registration'

- name: clone and initialize configuration for each repository
  include: initialize_repository.yml
  vars:
    origin_ci_repository: '{{ item }}'
  with_items:
    - 'origin'
    - 'origin-web-console'
    - 'origin-web-console-server'
    - 'console'
    - 'source-to-image'
    - 'origin-metrics'
    - 'origin-aggregated-logging'
    - 'openshift-ansible'
    - 'release'
    - 'aos-cd-jobs'
    - 'jenkins'
    - 'sti-wildfly'
    - 'jenkins-plugin'
    - 'jenkins-sync-plugin'
    - 'jenkins-client-plugin'
    - 'jenkins-openshift-login-plugin'
    - 'image-registry'
    - 'cluster-operator'
    - 'online-hibernation'
    - 'kubernetes-metrics-server'
    - 'online-console-extensions'
    - 'image-inspector'
    - 'service-catalog'

- name: initialize git directories for each private repository
  include: initialize_repository_placeholder.yml
  vars:
    origin_ci_repository: '{{ item }}'
  with_items:
    - 'ose'
    - 'online'

- name: ensure the repository management group exists
  group:
    name: '{{ origin_ci_user }}-git'
    state: present

- name: ensure that the correct user owns the repositories
  file:
    path: '{{ origin_ci_gopath }}'
    state: directory
    recurse: yes
    owner: '{{ origin_ci_user }}'
    group: '{{ origin_ci_user }}-git'
    mode: 'g+rwXs'

- name: ensure all necessary users have group-level privileges for the repos
  user:
    name: '{{ item }}'
    groups: '{{ origin_ci_user }}-git'
    append: yes
  with_items:
    - '{{ origin_ci_user }}'
    - '{{ ansible_user_id }}'
    - '{{ ansible_env.SUDO_USER }}'

- name: determine current Git configuration to allow for idempotency
  command: '/usr/bin/git config --list --global'
  register: origin_ci_global_config_probe
  failed_when: no
  become: yes
  become_user: '{{ origin_ci_user }}'

- name: add name to the local Git client to allow us to make Git actions
  command: '/usr/bin/git config --add --global user.name "Origin-CI Robot"'
  when: "'user.name' not in origin_ci_global_config_probe.stdout"
  become: yes
  become_user: '{{ origin_ci_user }}'

- name: add email to the local Git client to allow us to make Git actions
  command: '/usr/bin/git config --add --global user.email noreply@redhat.com'
  when: "'user.email' not in origin_ci_global_config_probe.stdout"
  become: yes
  become_user: '{{ origin_ci_user }}'
